{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Komiser EE is available in private beta test stage, sign in at https://cloud.komiser.io Stay under budget by uncovering hidden costs, monitoring increases in spend, and making impactful changes based on custom recommendations. Highlights Analyze and manage cloud cost, usage, security, and governance in one place. Control your usage and create visibility across all used services to achieve maximum cost-effectiveness. Detect potential vulnerabilities that could put your cloud environment at risk. Get a deep understanding of how you spend on the AWS, GCP, OVH, DigitalOcean and Azure. Support Komiser support multiple cloud providers: AWS GCP OVH DigitalOcean Azure IBM Alibaba Cloud","title":"Home"},{"location":"#komiser-ee-is-available-in-private-beta-test-stage-sign-in-at-httpscloudkomiserio","text":"Stay under budget by uncovering hidden costs, monitoring increases in spend, and making impactful changes based on custom recommendations. Highlights Analyze and manage cloud cost, usage, security, and governance in one place. Control your usage and create visibility across all used services to achieve maximum cost-effectiveness. Detect potential vulnerabilities that could put your cloud environment at risk. Get a deep understanding of how you spend on the AWS, GCP, OVH, DigitalOcean and Azure. Support Komiser support multiple cloud providers: AWS GCP OVH DigitalOcean Azure IBM Alibaba Cloud","title":"Komiser EE is available in private beta test stage, sign in at https://cloud.komiser.io"},{"location":"alerts/","text":"Daily Budget Head over to Your Apps and click the green \u201c Create New App \u201d button. A dialog like this will pop up: Generate OAuth Token: Add the below permissions scopes and reinstall the app in the target workspace: On Komiser EE Dashboard , navigate to \" Dashboard \" section: Click on \" Create Alert \" button: Fill out the form and click on create: That's it, you will receive everyday (9am GMT) a slack notification with the current monthly cost of each cloud account configured on your Komiser EE account:","title":"Alerts"},{"location":"alerts/#daily-budget","text":"Head over to Your Apps and click the green \u201c Create New App \u201d button. A dialog like this will pop up: Generate OAuth Token: Add the below permissions scopes and reinstall the app in the target workspace: On Komiser EE Dashboard , navigate to \" Dashboard \" section: Click on \" Create Alert \" button: Fill out the form and click on create: That's it, you will receive everyday (9am GMT) a slack notification with the current monthly cost of each cloud account configured on your Komiser EE account:","title":"Daily Budget"},{"location":"contributing/","text":"Get Started Contribute to the project There are many ways to contribute to the Komiser project. Before raising a PR or an issue request that you read our Contributing guide which applies to every Komiser GitHub repository. We have a wide range of suggestions for contributing to the project and community and only some of those involve writing code.","title":"Contributing"},{"location":"contributing/#get-started","text":"","title":"Get Started"},{"location":"contributing/#contribute-to-the-project","text":"There are many ways to contribute to the Komiser project. Before raising a PR or an issue request that you read our Contributing guide which applies to every Komiser GitHub repository. We have a wide range of suggestions for contributing to the project and community and only some of those involve writing code.","title":"Contribute to the project"},{"location":"getting_started/","text":"Installation You can install the CLI with a curl utility script or by downloading the binary from the releases page. Once installed you'll get the komiser command. Linux: wget https://s3.us-east-1.amazonaws.com/komiser/2.3.0/linux/komiser Windows: wget https://s3.us-east-1.amazonaws.com/komiser/2.3.0/windows/komiser Mac OS X: wget https://s3.us-east-1.amazonaws.com/komiser/2.3.0/osx/komiser Note Make sure to add the execution permission to Komiser chmod +x komiser . Docker image Komiser is also available as a Docker image: https://hub.docker.com/r/mlabouardy/komiser/tags/ There is no \"latest\" tag, so find the version of the CLI you want to use from the tags page on the Docker Hub. These correspond to the release from GitHub. docker run -d -p 3000:3000 --name komiser mlabouardy/komiser:2.3.0 Build from source The contributing guide has instructions for building from source and for configuring a Golang development environment.","title":"Getting Started"},{"location":"getting_started/#installation","text":"You can install the CLI with a curl utility script or by downloading the binary from the releases page. Once installed you'll get the komiser command.","title":"Installation"},{"location":"getting_started/#linux","text":"wget https://s3.us-east-1.amazonaws.com/komiser/2.3.0/linux/komiser","title":"Linux:"},{"location":"getting_started/#windows","text":"wget https://s3.us-east-1.amazonaws.com/komiser/2.3.0/windows/komiser","title":"Windows:"},{"location":"getting_started/#mac-os-x","text":"wget https://s3.us-east-1.amazonaws.com/komiser/2.3.0/osx/komiser Note Make sure to add the execution permission to Komiser chmod +x komiser .","title":"Mac OS X:"},{"location":"getting_started/#docker-image","text":"Komiser is also available as a Docker image: https://hub.docker.com/r/mlabouardy/komiser/tags/ There is no \"latest\" tag, so find the version of the CLI you want to use from the tags page on the Docker Hub. These correspond to the release from GitHub. docker run -d -p 3000:3000 --name komiser mlabouardy/komiser:2.3.0","title":"Docker image"},{"location":"getting_started/#build-from-source","text":"The contributing guide has instructions for building from source and for configuring a Golang development environment.","title":"Build from source"},{"location":"komiser_cloud/","text":"Komiser Cloud Komiser EE is available in private beta test stage, sign in at https://cloud.komiser.io","title":"Komiser Cloud"},{"location":"komiser_cloud/#komiser-cloud","text":"Komiser EE is available in private beta test stage, sign in at https://cloud.komiser.io","title":"Komiser Cloud"},{"location":"tutorials/","text":"Tutorials AWS Multiple AWS Accounts GCP OVH","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"","title":"Tutorials"},{"location":"tutorials/#aws","text":"","title":"AWS"},{"location":"tutorials/#multiple-aws-accounts","text":"","title":"Multiple AWS Accounts"},{"location":"tutorials/#gcp","text":"","title":"GCP"},{"location":"tutorials/#ovh","text":"","title":"OVH"},{"location":"providers/aws/","text":"AWS Usage Create an IAM user with the following IAM policy : wget https://komiser.s3.amazonaws.com/policy.json Add your Access Key ID and Secret Access Key to ~/.aws/credentials using this format [default] aws_access_key_id = <access key id> aws_secret_access_key = <secret access key> region = <AWS region> That should be it. Try out the following from your command prompt to start the server: komiser start --port 3000 Multiple AWS Accounts Support Komiser support multiple AWS accounts through named profiles that are stored in the config and credentials files . You can configure additional profiles by using aws configure with the --profile option, or by adding entries to the config and credentials files. The following example shows a credentials file with 3 profiles (production, staging & sandbox accounts): [Production] aws_access_key_id=<AWS_ACCESS_KEY_ID> aws_secret_access_key=<AWS_SECRET_ACCESS_KEY> [Staging] aws_access_key_id=<AWS_ACCESS_KEY_ID> aws_secret_access_key=<AWS_SECRET_ACCESS_KEY> [Sandbox] aws_access_key_id=<AWS_ACCESS_KEY_ID> aws_secret_access_key=<AWS_SECRET_ACCESS_KEY> To enable multiple AWS accounts feature, add the --multiple option to Komiser: komiser start --port 3000 --redis localhost:6379 --duration 30 --multiple If you point your browser to http://localhost:3000, you should be able to see your accounts: Configuring Credentials When using the CLI you'll generally need your AWS credentials to authenticate with AWS services. Komiser supports multiple methods of supporting these credentials. By default the CLI will source credentials automatically from its default credential chain. Environment Credentials - Set of environment variables that are useful when sub processes are created for specific roles. Shared Credentials file (~/.aws/credentials) - This file stores your credentials based on a profile name and is useful for local development. EC2 Instance Role Credentials - Use EC2 Instance Role to assign credentials to application running on an EC2 instance. This removes the need to manage credential files in production.","title":"AWS"},{"location":"providers/aws/#aws","text":"","title":"AWS"},{"location":"providers/aws/#usage","text":"Create an IAM user with the following IAM policy : wget https://komiser.s3.amazonaws.com/policy.json Add your Access Key ID and Secret Access Key to ~/.aws/credentials using this format [default] aws_access_key_id = <access key id> aws_secret_access_key = <secret access key> region = <AWS region> That should be it. Try out the following from your command prompt to start the server: komiser start --port 3000","title":"Usage"},{"location":"providers/aws/#multiple-aws-accounts-support","text":"Komiser support multiple AWS accounts through named profiles that are stored in the config and credentials files . You can configure additional profiles by using aws configure with the --profile option, or by adding entries to the config and credentials files. The following example shows a credentials file with 3 profiles (production, staging & sandbox accounts): [Production] aws_access_key_id=<AWS_ACCESS_KEY_ID> aws_secret_access_key=<AWS_SECRET_ACCESS_KEY> [Staging] aws_access_key_id=<AWS_ACCESS_KEY_ID> aws_secret_access_key=<AWS_SECRET_ACCESS_KEY> [Sandbox] aws_access_key_id=<AWS_ACCESS_KEY_ID> aws_secret_access_key=<AWS_SECRET_ACCESS_KEY> To enable multiple AWS accounts feature, add the --multiple option to Komiser: komiser start --port 3000 --redis localhost:6379 --duration 30 --multiple If you point your browser to http://localhost:3000, you should be able to see your accounts:","title":"Multiple AWS Accounts Support"},{"location":"providers/aws/#configuring-credentials","text":"When using the CLI you'll generally need your AWS credentials to authenticate with AWS services. Komiser supports multiple methods of supporting these credentials. By default the CLI will source credentials automatically from its default credential chain. Environment Credentials - Set of environment variables that are useful when sub processes are created for specific roles. Shared Credentials file (~/.aws/credentials) - This file stores your credentials based on a profile name and is useful for local development. EC2 Instance Role Credentials - Use EC2 Instance Role to assign credentials to application running on an EC2 instance. This removes the need to manage credential files in production.","title":"Configuring Credentials"},{"location":"providers/digitalocean/","text":"DigitalOcean To generate a personal access token, log in to the DigitalOcean Control Panel . Click the API link in the main navigation, In the Personal access tokens section, click the Generate New Token button. Create a ready-only scope token. When you click Generate Token , your token will be generated. Set DIGITALOCEAN_ACCESS_TOKEN environment variable: export DIGITALOCEAN_ACCESS_TOKEN=<TOKEN> If you point your browser to http://localhost:3000, you should be able to see your projects:","title":"DigitalOcean"},{"location":"providers/digitalocean/#digitalocean","text":"To generate a personal access token, log in to the DigitalOcean Control Panel . Click the API link in the main navigation, In the Personal access tokens section, click the Generate New Token button. Create a ready-only scope token. When you click Generate Token , your token will be generated. Set DIGITALOCEAN_ACCESS_TOKEN environment variable: export DIGITALOCEAN_ACCESS_TOKEN=<TOKEN> If you point your browser to http://localhost:3000, you should be able to see your projects:","title":"DigitalOcean"},{"location":"providers/gcp/","text":"GCP Usage Create a service account with Viewer permission, see Creating and managing service accounts docs. Enable the below APIs for your project through GCP Console, gcloud or using the Service Usage API. You can find out more about these options in Enabling an API in your GCP project docs. appengine.googleapis.com bigquery-json.googleapis.com compute.googleapis.com cloudfunctions.googleapis.com container.googleapis.com cloudresourcemanager.googleapis.com cloudkms.googleapis.com dns.googleapis.com dataflow.googleapis.com dataproc.googleapis.com iam.googleapis.com monitoring.googleapis.com pubsub.googleapis.com redis.googleapis.com serviceusage.googleapis.com storage-api.googleapis.com sqladmin.googleapis.com To analyze and optimize the infrastructure cost, you need to export your daily cost to BigQuery, see Export Billing to BigQuery docs. Provide authentication credentials to your application code by setting the environment variable GOOGLE_APPLICATION_CREDENTIALS : export GOOGLE_APPLICATION_CREDENTIALS=\"[PATH]\" That should be it. Try out the following from your command prompt to start the server: komiser start --port 3000 --dataset project-id.dataset-name.table-name Point your browser to http://localhost:3000 Options komiser start [OPTIONS] --port value, -p value Server port (default: 3000) --duration value, -d value Cache expiration time (default: 30 minutes) --redis value, -r value Redis server (localhost:6379) --dataset value, -ds value BigQuery dataset name (project-id.dataset-name.table-name) Configuring Credentials When using the CLI with GCP, Komiser checks to see if the environment variable GOOGLE_APPLICATION_CREDENTIALS is set. If not an error occurs.","title":"GCP"},{"location":"providers/gcp/#gcp","text":"","title":"GCP"},{"location":"providers/gcp/#usage","text":"Create a service account with Viewer permission, see Creating and managing service accounts docs. Enable the below APIs for your project through GCP Console, gcloud or using the Service Usage API. You can find out more about these options in Enabling an API in your GCP project docs. appengine.googleapis.com bigquery-json.googleapis.com compute.googleapis.com cloudfunctions.googleapis.com container.googleapis.com cloudresourcemanager.googleapis.com cloudkms.googleapis.com dns.googleapis.com dataflow.googleapis.com dataproc.googleapis.com iam.googleapis.com monitoring.googleapis.com pubsub.googleapis.com redis.googleapis.com serviceusage.googleapis.com storage-api.googleapis.com sqladmin.googleapis.com To analyze and optimize the infrastructure cost, you need to export your daily cost to BigQuery, see Export Billing to BigQuery docs. Provide authentication credentials to your application code by setting the environment variable GOOGLE_APPLICATION_CREDENTIALS : export GOOGLE_APPLICATION_CREDENTIALS=\"[PATH]\" That should be it. Try out the following from your command prompt to start the server: komiser start --port 3000 --dataset project-id.dataset-name.table-name Point your browser to http://localhost:3000","title":"Usage"},{"location":"providers/gcp/#options","text":"komiser start [OPTIONS] --port value, -p value Server port (default: 3000) --duration value, -d value Cache expiration time (default: 30 minutes) --redis value, -r value Redis server (localhost:6379) --dataset value, -ds value BigQuery dataset name (project-id.dataset-name.table-name)","title":"Options"},{"location":"providers/gcp/#configuring-credentials","text":"When using the CLI with GCP, Komiser checks to see if the environment variable GOOGLE_APPLICATION_CREDENTIALS is set. If not an error occurs.","title":"Configuring Credentials"},{"location":"providers/ovh/","text":"OVH Create an API application from here . This CLI will first look for direct instanciation parameters then OVH_ENDPOINT , OVH_APPLICATION_KEY , OVH_APPLICATION_SECRET and OVH_CONSUMER_KEY environment variables. If either of these parameter is not provided, it will look for a configuration file of the form: [default] ; general configuration: default endpoint endpoint=ovh-eu [ovh-eu] ; configuration specific to 'ovh-eu' endpoint application_key=my_app_key application_secret=my_application_secret consumer_key=my_consumer_key The CLI will successively attempt to locate this configuration file in Current working directory: ./ovh.conf Current user's home directory ~/.ovh.conf System wide configuration /etc/ovh.conf If you point your browser to http://localhost:3000, you should be able to see your projects:","title":"OVH"},{"location":"providers/ovh/#ovh","text":"Create an API application from here . This CLI will first look for direct instanciation parameters then OVH_ENDPOINT , OVH_APPLICATION_KEY , OVH_APPLICATION_SECRET and OVH_CONSUMER_KEY environment variables. If either of these parameter is not provided, it will look for a configuration file of the form: [default] ; general configuration: default endpoint endpoint=ovh-eu [ovh-eu] ; configuration specific to 'ovh-eu' endpoint application_key=my_app_key application_secret=my_application_secret consumer_key=my_consumer_key The CLI will successively attempt to locate this configuration file in Current working directory: ./ovh.conf Current user's home directory ~/.ovh.conf System wide configuration /etc/ovh.conf If you point your browser to http://localhost:3000, you should be able to see your projects:","title":"OVH"}]}